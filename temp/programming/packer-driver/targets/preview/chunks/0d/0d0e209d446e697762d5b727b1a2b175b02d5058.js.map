{"version":3,"sources":["file:///Users/swl/Desktop/cocos/cocos_android1/assets/scripts/poolManager.ts"],"names":["_decorator","Component","instantiate","NodePool","ccclass","property","poolManager","_dictPool","_dictPrefab","instance","_instance","getNode","prefab","parent","name","position","data","node","hasOwnProperty","pool","size","get","active","putNode","put","clearPool","clear","prePool","nodeNum","i","start","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, NodePool} from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('poolManager')\nexport class poolManager extends Component {\n\n    private _dictPool: any = {}\n    private _dictPrefab: any = {}\n\n    static _instance: poolManager;\n\n    static get instance() {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new poolManager();\n        return this._instance;\n    }\n\n    /**\n     * 根据预设从对象池中获取对应节点\n     */\n    public getNode(prefab: Prefab, parent: Node) {\n        let name = prefab.name;\n        //@ts-ignore\n        if (!prefab.position) {\n            //@ts-ignore\n            name = prefab.data.name;\n        }\n\n        this._dictPrefab[name] = prefab;\n        let node = null;\n        if (this._dictPool.hasOwnProperty(name)) {\n            // 已有对应的对象池\n            let pool = this._dictPool[name];\n            if (pool.size() > 0) {\n                node = pool.get();\n            } else {\n                node = instantiate(prefab);\n            }\n        } else {\n            // 没有对应对象池就创建对象池\n            let pool = new NodePool();\n            this._dictPool[name] = pool;\n\n            node = instantiate(prefab);\n        }\n\n        node.parent = parent;\n        node.active = true;\n        return node;\n    }\n\n    /**\n     * 将对应节点放回对象池中\n     */\n    public putNode(node: Node) {\n        if (!node) {\n            return;\n        }\n        let name = node.name;\n        let pool = null;\n        if (this._dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            pool = this._dictPool[name];\n        } else {\n            //没有对应对象池，创建他！\n            pool = new NodePool();\n            this._dictPool[name] = pool;\n        }\n\n        pool.put(node);\n    }\n\n    /**\n     * 根据名称，清除对应对象池\n     */\n    public clearPool(name: string) {\n        if(this._dictPool.hasOwnProperty(name)) {\n            let pool = this._dictPool[name];\n            pool.clear();\n        }\n    }\n\n    /**\n    * 预生成对象池\n    * @param prefab\n    * @param nodeNum\n    * 使用——poolManager.instance.prePool(prefab, 40);\n    */\n    public prePool(prefab: Prefab, nodeNum: number) {\n        const name = prefab.name;\n\n        let pool = new NodePool();\n        this._dictPool[name] = pool;\n\n        for (let i = 0; i < nodeNum; i++) {\n            const node = instantiate(prefab);\n            pool.put(node);\n        }\n    }\n\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n\n"]}