{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/assets/scripts/Socket/Socket.ts"],"names":["_decorator","Component","log","ccclass","property","ESocketState","Socket","socket","state","None","onOpen","onClose","onMessage","onError","start","connect","url","Connecting","WebSocket","bindEvent","onopen","Connected","onclose","ev","code","onerror","e","onmessage","JSON","parse","data","send","close","update","deltaTime"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,G,OAAAA,G;;;;;;;;;OAChC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;AAEzBK,MAAAA,Y,0BAAAA,Y;AAAAA,QAAAA,Y,CAAAA,Y;AAAAA,QAAAA,Y,CAAAA,Y;AAAAA,QAAAA,Y,CAAAA,Y;eAAAA,Y;QAAAA,Y;;wBAMQC,M,WADZH,OAAO,CAAC,QAAD,C,gBAAR,MACaG,MADb,SAC4BL,SAD5B,CACsC;AAAA;AAAA;AAClC;AADkC,eAE1BM,MAF0B,GAEN,IAFM;AAGlC;AAHkC,eAI1BC,KAJ0B,GAIVH,YAAY,CAACI,IAJH;AAKlC;AALkC,eAM3BC,MAN2B,GAMN,IANM;AAOlC;AAPkC,eAQ3BC,OAR2B,GAQS,IART;AASlC;AATkC,eAU3BC,SAV2B,GAUM,IAVN;AAWlC;AAXkC,eAY3BC,OAZ2B,GAYI,IAZJ;AAAA;;AAalCC,QAAAA,KAAK,GAAG,CAEP;AACD;AACJ;AACA;AACA;;;AACWC,QAAAA,OAAO,CAACC,GAAD,EAAoB;AAC9B,cAAI,KAAKR,KAAL,IAAcH,YAAY,CAACI,IAA/B,EAAqC;AACjC,iBAAKD,KAAL,GAAaH,YAAY,CAACY,UAA1B;AACAf,YAAAA,GAAG,sBAAoBc,GAApB,OAAH;AACA,iBAAKT,MAAL,GAAc,IAAIW,SAAJ,CAAcF,GAAd,CAAd;AACA,iBAAKG,SAAL;AACH;AACJ;AACD;AACJ;AACA;;;AACYA,QAAAA,SAAS,GAAS;AACtB,eAAKZ,MAAL,CAAYa,MAAZ,GAAqB,MAAM;AACvB,iBAAKZ,KAAL,GAAaH,YAAY,CAACgB,SAA1B;AACAnB,YAAAA,GAAG,iBAAH;AACA,iBAAKQ,MAAL,IAAe,KAAKA,MAAL,EAAf;AACH,WAJD;;AAKA,eAAKH,MAAL,CAAYe,OAAZ,GAAuBC,EAAD,IAAoB;AACtCrB,YAAAA,GAAG,2BAAyBqB,EAAE,CAACC,IAA5B,OAAH;AACA,iBAAKhB,KAAL,GAAaH,YAAY,CAACI,IAA1B;AACA,iBAAKE,OAAL,IAAgB,KAAKA,OAAL,CAAaY,EAAb,CAAhB;AACH,WAJD;;AAKA,eAAKhB,MAAL,CAAYkB,OAAZ,GAAuBC,CAAD,IAAc;AAChCxB,YAAAA,GAAG,kBAAH;AACA,iBAAKM,KAAL,GAAaH,YAAY,CAACI,IAA1B;AACA,iBAAKI,OAAL,IAAgB,KAAKA,OAAL,CAAaa,CAAb,CAAhB;AACH,WAJD;;AAKA,eAAKnB,MAAL,CAAYoB,SAAZ,GAAyBD,CAAD,IAAqB;AACzC,gBAAI,KAAKd,SAAT,EAAoB;AAChB,mBAAKA,SAAL,CAAegB,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAf;AACH;AACJ,WAJD;AAKH;AACD;AACJ;AACA;AACA;AACA;;;AACWC,QAAAA,IAAI,CAACD,IAAD,EAAmC;AAC1C,cAAI,KAAKtB,KAAL,IAAcH,YAAY,CAACgB,SAA/B,EAA0C;AACtCnB,YAAAA,GAAG,sBAAH;AACA;AACH;;AACD,eAAKK,MAAL,CAAYwB,IAAZ,CAAiBD,IAAjB;AACH;AACD;AACJ;AACA;;;AACWE,QAAAA,KAAK,GAAS;AACjB,cAAI,KAAKxB,KAAL,IAAcH,YAAY,CAACgB,SAA/B,EAA0C;AACtC;AACH;;AACDnB,UAAAA,GAAG,gBAAH;AACA,eAAKK,MAAL,CAAYyB,KAAZ;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AA9EiC,O","sourcesContent":["import { _decorator, Component, Node, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\nenum ESocketState {\n    None = 0,\n    Connecting = 1,\n    Connected = 2\n}\n@ccclass('Socket')\nexport class Socket extends Component {\n    // webSocket\n    private socket: WebSocket = null;\n    // 状态\n    private state: number = ESocketState.None;\n    // 连接已建立回调\n    public onOpen: () => void = null;\n    // 连接已关闭回调\n    public onClose: (ev: CloseEvent) => void = null;\n    // 接收到数据回调\n    public onMessage: (data: any) => void = null;\n    // WebSocket错误回调\n    public onError: (ev: Event) => void = null;\n    start() {\n\n    }\n    /**\n     * 连接\n     * @param url socket地址\n     */\n    public connect(url: string): void {\n        if (this.state == ESocketState.None) {\n            this.state = ESocketState.Connecting;\n            log(`socket connect:(${url})`);\n            this.socket = new WebSocket(url);\n            this.bindEvent();\n        }\n    }\n    /**\n     * 绑定事件\n     */\n    private bindEvent(): void {\n        this.socket.onopen = () => {\n            this.state = ESocketState.Connected;\n            log(`socket onopen`);\n            this.onOpen && this.onOpen();\n        };\n        this.socket.onclose = (ev: CloseEvent) => {\n            log(`socket onclose code:(${ev.code})`);\n            this.state = ESocketState.None;\n            this.onClose && this.onClose(ev);\n        };\n        this.socket.onerror = (e: Event) => {\n            log(`socket onerror`);\n            this.state = ESocketState.None;\n            this.onError && this.onError(e);\n        };\n        this.socket.onmessage = (e: MessageEvent) => {\n            if (this.onMessage) {\n                this.onMessage(JSON.parse(e.data));\n            }\n        }\n    }\n    /**\n     * 发送数据\n     * @param data\n     * @returns \n     */\n    public send(data: string | ArrayBuffer): void {\n        if (this.state != ESocketState.Connected) {\n            log(`socket not connect`);\n            return;\n        }\n        this.socket.send(data);\n    }\n    /**\n     * 关闭连接\n     */\n    public close(): void {\n        if (this.state != ESocketState.Connected) {\n            return;\n        }\n        log(`socket close`);\n        this.socket.close();\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n"]}