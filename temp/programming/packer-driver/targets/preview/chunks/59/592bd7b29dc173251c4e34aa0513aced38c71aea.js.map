{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/assets/scripts/ColorSDFSprite.ts"],"names":["_decorator","cclegacy","InstanceMaterialType","Material","NodeEventType","RenderTexture","Sprite","SpriteAtlas","SpriteFrame","UIRenderer","BUILD","EDITOR","ColorSDFAssembler","ccclass","property","type","EventType","ColorSDFSprite","serializable","SizeMode","sizeMode","_sizeMode","value","CUSTOM","_applySpriteSize","spriteAtlas","_atlas","spriteFrame","_spriteFrame","lastSprite","markForUpdateRenderData","_applySpriteFrame","node","emit","SPRITE_FRAME_CHANGED","onLoad","_flushAssembler","__preload","changeMaterialForDefine","_resized","on","SIZE_CHANGED","onEnable","_activateMaterial","_updateUVs","onDestroy","off","changeSpriteFrameFromAtlas","name","console","warn","sprite","getSpriteFrame","texture","lastInstanceMaterialType","_instanceMaterialType","TextureBase","format","getPixelFormat","PixelFormat","RGBA_ETC1","RGB_A_PVRTC_4BPPV1","RGB_A_PVRTC_2BPPV1","USE_ALPHA_SEPARATED","ADD_COLOR_AND_TEXTURE","_updateBuiltinMaterial","mat","defines","SAMPLE_FROM_RT","passes","renderMat","initialize","effectAsset","_render","render","commitComp","renderData","_assembler","_canRender","resetAssembler","assembler","destroyRenderData","_renderData","createData","material","getRenderMaterial","updateRenderData","_updateColor","isDefault","RAW","size","originalSize","_uiProps","uiTransformComp","setContentSize","TRIMMED","rect","width","height","actualSize","contentSize","expectedW","expectedH","updateUVs","oldFrame","textureChanged","textureDirty"],"mappings":"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","sourcesContent":["import { _decorator, cclegacy, Component, InstanceMaterialType, Material, Node, NodeEventType, RenderTexture, Sprite, SpriteAtlas, SpriteFrame, UIRenderer } from 'cc';\nimport { BUILD, EDITOR } from 'cc/env';\nimport { ColorSDFAssembler } from './ColorSDFAssembler';\nconst { ccclass, property ,type} = _decorator;\nenum EventType {\n    SPRITE_FRAME_CHANGED = 'spriteframe-changed',\n}\n@ccclass('ColorSDFSprite')\nexport class ColorSDFSprite extends UIRenderer {\n    // 尺寸模式，可以看枚举原本定义的地方有注释说明\n    @property({serializable:true})\n    protected _sizeMode = Sprite.SizeMode.TRIMMED;\n    @type(Sprite.SizeMode)\n    get sizeMode () {\n        return this._sizeMode;\n    }\n    set sizeMode (value) {\n        if (this._sizeMode === value) {\n            return;\n        }\n\n        this._sizeMode = value;\n        if (value !== Sprite.SizeMode.CUSTOM) {\n            this._applySpriteSize();\n        }\n    }\n    // 图集\n    @property({serializable:true})\n    protected _atlas: SpriteAtlas | null = null;\n    @type(SpriteAtlas)\n    get spriteAtlas () {\n        return this._atlas;\n    }\n    set spriteAtlas (value) {\n        if (this._atlas === value) {\n            return;\n        }\n        this._atlas = value;\n    }\n\n    @property({serializable:true})\n    protected _spriteFrame: SpriteFrame | null = null;\n    @type(SpriteFrame)\n    get spriteFrame () {\n        return this._spriteFrame;\n    }\n    set spriteFrame (value) {\n        if (this._spriteFrame === value) {\n            return;\n        }\n\n        const lastSprite = this._spriteFrame;\n        this._spriteFrame = value;\n        this.markForUpdateRenderData();\n        this._applySpriteFrame(lastSprite);\n        if (EDITOR) {\n            this.node.emit(EventType.SPRITE_FRAME_CHANGED, this);\n        }\n    }\n\n    onLoad(): void {\n        this._flushAssembler();\n    }\n\n    public __preload () {\n        this.changeMaterialForDefine();\n        super.__preload();\n\n        if (EDITOR) {\n            this._resized();\n            this.node.on(NodeEventType.SIZE_CHANGED, this._resized, this);\n        }\n    }\n\n    public onEnable () {\n        super.onEnable();\n\n        // Force update uv, material define, active material, etc\n        this._activateMaterial();\n        const spriteFrame = this._spriteFrame;\n        if (spriteFrame) {\n            this._updateUVs();\n        }\n    }\n\n    public onDestroy () {\n        if (EDITOR) {\n            this.node.off(NodeEventType.SIZE_CHANGED, this._resized, this);\n        }\n        super.onDestroy();\n    }\n\n    /**\n     * @en\n     * Quickly switch to other sprite frame in the sprite atlas.\n     * If there is no atlas, the switch fails.\n     *\n     * @zh\n     * 选取使用精灵图集中的其他精灵。\n     * @param name @en Name of the spriteFrame to switch. @zh 要切换的 spriteFrame 名字。\n     */\n    public changeSpriteFrameFromAtlas (name: string) {\n        if (!this._atlas) {\n            console.warn('SpriteAtlas is null.');\n            return;\n        }\n        const sprite = this._atlas.getSpriteFrame(name);\n        this.spriteFrame = sprite;\n    }\n\n    /**\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\n     */\n    public changeMaterialForDefine () {\n        let texture;\n        const lastInstanceMaterialType = this._instanceMaterialType;\n        if (this._spriteFrame) {\n            texture = this._spriteFrame.texture;\n        }\n        let value = false;\n        if (texture instanceof cclegacy.TextureBase) {\n            const format = texture.getPixelFormat();\n            value = (format === cclegacy.TextureBase.PixelFormat.RGBA_ETC1 || format === cclegacy.TextureBase.PixelFormat.RGB_A_PVRTC_4BPPV1 || format === cclegacy.TextureBase.PixelFormat.RGB_A_PVRTC_2BPPV1);\n        }\n\n        if (value) {\n            this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED;\n        } else {\n            this._instanceMaterialType = InstanceMaterialType.ADD_COLOR_AND_TEXTURE;\n        }\n        if (lastInstanceMaterialType !== this._instanceMaterialType) {\n            // this.updateMaterial();\n            // d.ts里没有注上这个函数，直接调用会表红。\n            this[\"updateMaterial\"]();\n        }\n    }\n\n    protected _updateBuiltinMaterial () {\n        let mat = super._updateBuiltinMaterial();\n        if (this.spriteFrame && this.spriteFrame.texture instanceof RenderTexture) {\n            const defines = { SAMPLE_FROM_RT: true, ...mat.passes[0].defines };\n            const renderMat = new Material();\n            renderMat.initialize({\n                effectAsset: mat.effectAsset,\n                defines,\n            });\n            mat = renderMat;\n        }\n        return mat;\n    }\n\n    protected _render (render) {\n        render.commitComp(this, this.renderData, this._spriteFrame, this._assembler, null);\n    }\n\n    protected _canRender () {\n        if (!super._canRender()) {\n            return false;\n        }\n\n        const spriteFrame = this._spriteFrame;\n        if (!spriteFrame || !spriteFrame.texture) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected resetAssembler() {\n        this._assembler = null;\n        this._flushAssembler();\n    }\n    protected _flushAssembler () {\n        const assembler = ColorSDFAssembler;\n\n        if (this._assembler !== assembler) {\n            this.destroyRenderData();\n            this._assembler = assembler;\n        }\n\n\n        if (!this._renderData) {\n            if (this._assembler && this._assembler.createData) {\n                this._renderData = this._assembler.createData(this);\n                this._renderData!.material = this.getRenderMaterial(0);\n                this.markForUpdateRenderData();\n                if (this.spriteFrame) {\n                    this._assembler.updateRenderData(this);\n                }\n                this._updateColor();\n            }\n        }\n    }\n\n    private _applySpriteSize () {\n        if (this._spriteFrame) {\n            if (BUILD || !this._spriteFrame.isDefault) {\n                if (Sprite.SizeMode.RAW === this._sizeMode) {\n                    const size = this._spriteFrame.originalSize;\n                    this.node._uiProps.uiTransformComp!.setContentSize(size);\n                } else if (Sprite.SizeMode.TRIMMED === this._sizeMode) {\n                    const rect = this._spriteFrame.rect;\n                    this.node._uiProps.uiTransformComp!.setContentSize(rect.width, rect.height);\n                }\n            }\n            this.markForUpdateRenderData(true)\n            this._assembler.updateRenderData(this);\n        }\n    }\n\n    private _resized () {\n        if (!EDITOR) {\n            return;\n        }\n\n        if (this._spriteFrame) {\n            const actualSize = this.node._uiProps.uiTransformComp!.contentSize;\n            let expectedW = actualSize.width;\n            let expectedH = actualSize.height;\n            if (this._sizeMode === Sprite.SizeMode.RAW) {\n                const size = this._spriteFrame.originalSize;\n                expectedW = size.width;\n                expectedH = size.height;\n            } else if (this._sizeMode === Sprite.SizeMode.TRIMMED) {\n                const rect = this._spriteFrame.rect;\n                expectedW = rect.width;\n                expectedH = rect.height;\n            }\n\n            if (expectedW !== actualSize.width || expectedH !== actualSize.height) {\n                this._sizeMode = Sprite.SizeMode.CUSTOM;\n            }\n        }\n    }\n\n    private _activateMaterial () {\n        const spriteFrame = this._spriteFrame;\n        const material = this.getRenderMaterial(0);\n        if (spriteFrame) {\n            if (material) {\n                this.markForUpdateRenderData();\n            }\n        }\n\n        if (this.renderData) {\n            this.renderData.material = material;\n        }\n    }\n\n    private _updateUVs () {\n        if (this._assembler) {\n            this._assembler.updateUVs(this);\n        }\n    }\n\n    private _applySpriteFrame (oldFrame: SpriteFrame | null) {\n        const spriteFrame = this._spriteFrame;\n\n        let textureChanged = false;\n        if (spriteFrame) {\n            if (!oldFrame || oldFrame.texture !== spriteFrame.texture) {\n                textureChanged = true;\n            }\n            if (textureChanged) {\n                if (this.renderData) this.renderData.textureDirty = true;\n                this.changeMaterialForDefine();\n            }\n            this._applySpriteSize();\n        }\n    }\n}\n\n\n"]}