{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/assets/scripts/RoundBoxSprite.ts"],"names":["_decorator","CCFloat","CCInteger","cclegacy","InstanceMaterialType","Material","NodeEventType","RenderTexture","Sprite","SpriteAtlas","SpriteFrame","UIRenderer","BUILD","EDITOR","RoundBoxAssembler","ccclass","property","type","EventType","RoundBoxSprite","serializable","SizeMode","min","sizeMode","_sizeMode","value","CUSTOM","_applySpriteSize","spriteAtlas","_atlas","segments","_segments","_renderData","_flushAssembler","radius","_radius","_updateUVs","markForUpdateRenderData","spriteFrame","_spriteFrame","lastSprite","_applySpriteFrame","node","emit","SPRITE_FRAME_CHANGED","leftTop","_leftTop","resetAssembler","rightTop","_rightTop","leftBottom","_leftBottom","rightBottom","_rightBottom","onLoad","__preload","changeMaterialForDefine","_resized","on","SIZE_CHANGED","onEnable","_activateMaterial","onDestroy","off","changeSpriteFrameFromAtlas","name","console","warn","sprite","getSpriteFrame","texture","lastInstanceMaterialType","_instanceMaterialType","TextureBase","format","getPixelFormat","PixelFormat","RGBA_ETC1","RGB_A_PVRTC_4BPPV1","RGB_A_PVRTC_2BPPV1","USE_ALPHA_SEPARATED","ADD_COLOR_AND_TEXTURE","_updateBuiltinMaterial","mat","defines","SAMPLE_FROM_RT","passes","renderMat","initialize","effectAsset","_render","render","commitComp","renderData","_assembler","_canRender","assembler","destroyRenderData","createData","material","getRenderMaterial","updateRenderData","_updateColor","isDefault","RAW","size","originalSize","_uiProps","uiTransformComp","setContentSize","TRIMMED","rect","width","height","actualSize","contentSize","expectedW","expectedH","updateUVs","oldFrame","textureChanged","textureDirty"],"mappings":"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","sourcesContent":["import { _decorator, ccenum, CCFloat, CCInteger, cclegacy, Component, InstanceMaterialType, Material, Node, NodeEventType, RenderTexture, serializeTag, Sprite, SpriteAtlas, SpriteFrame, UIRenderer, Vec2} from 'cc';\nimport { BUILD, EDITOR } from 'cc/env';\nimport { RoundBoxAssembler } from './RoundBoxAssembler';\n\nconst { ccclass, property,type} = _decorator;\nenum EventType {\n    SPRITE_FRAME_CHANGED = 'spriteframe-changed',\n}\n\n@ccclass('RoundBoxSprite')\nexport class RoundBoxSprite extends UIRenderer {\n    // 尺寸模式，可以看枚举原本定义的地方有注释说明\n    @property({serializable:true})\n    protected _sizeMode = Sprite.SizeMode.TRIMMED;\n    @type(Sprite.SizeMode)\n    get sizeMode () {\n        return this._sizeMode;\n    }\n    set sizeMode (value) {\n        if (this._sizeMode === value) {\n            return;\n        }\n\n        this._sizeMode = value;\n        if (value !== Sprite.SizeMode.CUSTOM) {\n            this._applySpriteSize();\n        }\n    }\n    // 图集\n    @property({serializable:true})\n    protected _atlas: SpriteAtlas | null = null;\n    @type(SpriteAtlas)\n    get spriteAtlas () {\n        return this._atlas;\n    }\n    set spriteAtlas (value) {\n        if (this._atlas === value) {\n            return;\n        }\n        this._atlas = value;\n    }\n    // 圆角用三角形模拟扇形的线段数量，越大，则越圆滑\n    @property({type:CCInteger, serializable:true})\n    _segments:number = 10\n    @property({type:CCInteger, serializable:true, min:1})\n    public get segments() {\n        return this._segments;\n    }\n    public set segments(segments) {\n        this._segments = segments;\n        this._renderData = null;\n        this._flushAssembler();\n    }\n    // 圆角半径\n    @property({type:CCFloat, serializable:true})\n    _radius:number = 20\n    @property({type:CCFloat, serializable:true, min:0})\n    public get radius() {\n        return this._radius\n    }\n    public set radius(radius) {\n        this._radius = radius;\n        this._updateUVs();\n        this.markForUpdateRenderData(true)\n    }\n\n    @property({serializable:true})\n    protected _spriteFrame: SpriteFrame | null = null;\n    @type(SpriteFrame)\n    get spriteFrame () {\n        return this._spriteFrame;\n    }\n    set spriteFrame (value) {\n        if (this._spriteFrame === value) {\n            return;\n        }\n\n        const lastSprite = this._spriteFrame;\n        this._spriteFrame = value;\n        this.markForUpdateRenderData();\n        this._applySpriteFrame(lastSprite);\n        if (EDITOR) {\n            this.node.emit(EventType.SPRITE_FRAME_CHANGED, this);\n        }\n    }\n    @property({serializable:true})\n    protected _leftTop:boolean = true;\n    @property({serializable:true})\n    get leftTop () {\n        return this._leftTop;\n    }\n    set leftTop (value:boolean) {\n        this._leftTop = value;\n        this.resetAssembler();\n    }\n    @property({serializable:true})\n    protected _rightTop:boolean = true;\n    @property({serializable:true})\n    get rightTop () {\n        return this._rightTop;\n    }\n    set rightTop (value:boolean) {\n        this._rightTop = value;\n        this.resetAssembler();\n    }\n    @property({serializable:true})\n    protected _leftBottom:boolean = true;\n    @property({serializable:true})\n    get leftBottom () {\n        return this._leftBottom;\n    }\n    set leftBottom (value:boolean) {\n        this._leftBottom = value;\n        this.resetAssembler();\n    }\n    @property({serializable:true})\n    protected _rightBottom:boolean = true;\n    @property({serializable:true})\n    get rightBottom () {\n        return this._rightBottom;\n    }\n    set rightBottom (value:boolean) {\n        this._rightBottom = value;\n        this.resetAssembler();\n    }\n    onLoad(): void {\n        this._flushAssembler();\n    }\n\n    public __preload () {\n        this.changeMaterialForDefine();\n        super.__preload();\n\n        if (EDITOR) {\n            this._resized();\n            this.node.on(NodeEventType.SIZE_CHANGED, this._resized, this);\n        }\n    }\n\n    public onEnable () {\n        super.onEnable();\n\n        // Force update uv, material define, active material, etc\n        this._activateMaterial();\n        const spriteFrame = this._spriteFrame;\n        if (spriteFrame) {\n            this._updateUVs();\n        }\n    }\n\n    public onDestroy () {\n        if (EDITOR) {\n            this.node.off(NodeEventType.SIZE_CHANGED, this._resized, this);\n        }\n        super.onDestroy();\n    }\n\n    /**\n     * @en\n     * Quickly switch to other sprite frame in the sprite atlas.\n     * If there is no atlas, the switch fails.\n     *\n     * @zh\n     * 选取使用精灵图集中的其他精灵。\n     * @param name @en Name of the spriteFrame to switch. @zh 要切换的 spriteFrame 名字。\n     */\n    public changeSpriteFrameFromAtlas (name: string) {\n        if (!this._atlas) {\n            console.warn('SpriteAtlas is null.');\n            return;\n        }\n        const sprite = this._atlas.getSpriteFrame(name);\n        this.spriteFrame = sprite;\n    }\n\n    /**\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\n     */\n    public changeMaterialForDefine () {\n        let texture;\n        const lastInstanceMaterialType = this._instanceMaterialType;\n        if (this._spriteFrame) {\n            texture = this._spriteFrame.texture;\n        }\n        let value = false;\n        if (texture instanceof cclegacy.TextureBase) {\n            const format = texture.getPixelFormat();\n            value = (format === cclegacy.TextureBase.PixelFormat.RGBA_ETC1 || format === cclegacy.TextureBase.PixelFormat.RGB_A_PVRTC_4BPPV1 || format === cclegacy.TextureBase.PixelFormat.RGB_A_PVRTC_2BPPV1);\n        }\n\n        if (value) {\n            this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED;\n        } else {\n            this._instanceMaterialType = InstanceMaterialType.ADD_COLOR_AND_TEXTURE;\n        }\n        if (lastInstanceMaterialType !== this._instanceMaterialType) {\n            // this.updateMaterial();\n            // d.ts里没有注上这个函数，直接调用会表红。\n            this[\"updateMaterial\"]();\n        }\n    }\n\n    protected _updateBuiltinMaterial () {\n        let mat = super._updateBuiltinMaterial();\n        if (this.spriteFrame && this.spriteFrame.texture instanceof RenderTexture) {\n            const defines = { SAMPLE_FROM_RT: true, ...mat.passes[0].defines };\n            const renderMat = new Material();\n            renderMat.initialize({\n                effectAsset: mat.effectAsset,\n                defines,\n            });\n            mat = renderMat;\n        }\n        return mat;\n    }\n\n    protected _render (render) {\n        render.commitComp(this, this.renderData, this._spriteFrame, this._assembler, null);\n    }\n\n    protected _canRender () {\n        if (!super._canRender()) {\n            return false;\n        }\n\n        const spriteFrame = this._spriteFrame;\n        if (!spriteFrame || !spriteFrame.texture) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected resetAssembler() {\n        this._assembler = null;\n        this._flushAssembler();\n    }\n    protected _flushAssembler () {\n        const assembler = RoundBoxAssembler;\n\n        if (this._assembler !== assembler) {\n            this.destroyRenderData();\n            this._assembler = assembler;\n        }\n\n\n        if (!this._renderData) {\n            if (this._assembler && this._assembler.createData) {\n                this._renderData = this._assembler.createData(this);\n                this._renderData!.material = this.getRenderMaterial(0);\n                this.markForUpdateRenderData();\n                if (this.spriteFrame) {\n                    this._assembler.updateRenderData(this);\n                }\n                this._updateColor();\n            }\n        }\n    }\n\n    private _applySpriteSize () {\n        if (this._spriteFrame) {\n            if (BUILD || !this._spriteFrame.isDefault) {\n                if (Sprite.SizeMode.RAW === this._sizeMode) {\n                    const size = this._spriteFrame.originalSize;\n                    this.node._uiProps.uiTransformComp!.setContentSize(size);\n                } else if (Sprite.SizeMode.TRIMMED === this._sizeMode) {\n                    const rect = this._spriteFrame.rect;\n                    this.node._uiProps.uiTransformComp!.setContentSize(rect.width, rect.height);\n                }\n            }\n            this.markForUpdateRenderData(true)\n            this._assembler.updateRenderData(this);\n        }\n    }\n\n    private _resized () {\n        if (!EDITOR) {\n            return;\n        }\n\n        if (this._spriteFrame) {\n            const actualSize = this.node._uiProps.uiTransformComp!.contentSize;\n            let expectedW = actualSize.width;\n            let expectedH = actualSize.height;\n            if (this._sizeMode === Sprite.SizeMode.RAW) {\n                const size = this._spriteFrame.originalSize;\n                expectedW = size.width;\n                expectedH = size.height;\n            } else if (this._sizeMode === Sprite.SizeMode.TRIMMED) {\n                const rect = this._spriteFrame.rect;\n                expectedW = rect.width;\n                expectedH = rect.height;\n            }\n\n            if (expectedW !== actualSize.width || expectedH !== actualSize.height) {\n                this._sizeMode = Sprite.SizeMode.CUSTOM;\n            }\n        }\n    }\n\n    private _activateMaterial () {\n        const spriteFrame = this._spriteFrame;\n        const material = this.getRenderMaterial(0);\n        if (spriteFrame) {\n            if (material) {\n                this.markForUpdateRenderData();\n            }\n        }\n\n        if (this.renderData) {\n            this.renderData.material = material;\n        }\n    }\n\n    private _updateUVs () {\n        if (this._assembler) {\n            this._assembler.updateUVs(this);\n        }\n    }\n\n    private _applySpriteFrame (oldFrame: SpriteFrame | null) {\n        const spriteFrame = this._spriteFrame;\n\n        let textureChanged = false;\n        if (spriteFrame) {\n            if (!oldFrame || oldFrame.texture !== spriteFrame.texture) {\n                textureChanged = true;\n            }\n            if (textureChanged) {\n                if (this.renderData) this.renderData.textureDirty = true;\n                this.changeMaterialForDefine();\n            }\n            this._applySpriteSize();\n        }\n    }\n}\n"]}