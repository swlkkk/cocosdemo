{"version":3,"sources":["file:///Users/swl/Desktop/cocos%E5%90%88%E9%9B%86/cocos_android/assets/scripts/Api/encrypt.ts"],"names":["_decorator","Component","ccclass","property","encrypt","generateUUID","length","letters","result","i","Math","floor","random","start","encode","input","key","buf","unescape","encodeURIComponent","keys","encoded","String","fromCharCode","charCodeAt","btoa","decode","atob","decoded","decodeURIComponent","escape","ws_encode","salt","salts","tempEncoded","a","b","ws_decode","tempDecoded","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('encrypt')\nexport class encrypt extends Component {\n    start() {\n\n    }\n    //key生成\n    generateUUID = (length = 64) => {\n        // 字符集\n        let letters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        let result = ''\n        for (let i = 0; i < length; i++) {\n            result += letters[Math.floor(Math.random() * letters.length)]\n        }\n        return result\n    }\n    // 加密函数\n    encode(input, key) {\n        let buf: any = unescape(encodeURIComponent(input))\n        let keys = unescape(encodeURIComponent(key))\n        let encoded = ''\n        let i: any = null\n        for (i in buf) {\n            encoded += String.fromCharCode(buf.charCodeAt(i) ^ keys.charCodeAt(i % keys.length) ^ (255 & i))\n        }\n        return btoa(encoded)\n    }\n\n    // 解密函数\n    decode(input, key) {\n        let buf: any = atob(input)\n        let keys = unescape(encodeURIComponent(key))\n        let decoded = ''\n        let i: any = null\n        for (i in buf) {\n            decoded += String.fromCharCode((255 & i) ^ buf.charCodeAt(i) ^ keys.charCodeAt(i % keys.length))\n        }\n        return decodeURIComponent(escape(decoded))\n    }\n\n    // 加密函数\n    ws_encode(input, key, salt) {\n        let buf: any = unescape(encodeURIComponent(input))\n        let keys = unescape(encodeURIComponent(key))\n        let encoded = ''\n        let i: any = null\n        for (i in buf) {\n            encoded += String.fromCharCode(buf.charCodeAt(i) ^ keys.charCodeAt(i % keys.length) ^ (255 & i))\n        }\n        if (salt && salt.length > 0) {\n            let salts = unescape(encodeURIComponent(salt))\n            let tempEncoded = ''\n            for (let i = 0; i < encoded.length; i++) {\n                let a = encoded.charCodeAt(i)\n                let b = salts.charCodeAt(i % salts.length)\n                tempEncoded += String.fromCharCode(a ^ b)\n            }\n            encoded = tempEncoded\n        }\n        return btoa(encoded)\n    }\n    // 解密函数\n    ws_decode(encoded, key, salt) {\n        let decoded: any = atob(encoded) // Decode base64\n        if (salt && salt.length > 0) {\n            let salts = unescape(encodeURIComponent(salt))\n            let tempDecoded = ''\n            for (let i = 0; i < decoded.length; i++) {\n                let a = decoded.charCodeAt(i)\n                let b = salts.charCodeAt(i % salts.length)\n                tempDecoded += String.fromCharCode(a ^ b)\n            }\n            decoded = tempDecoded\n        }\n\n        let keys = unescape(encodeURIComponent(key))\n        let buf = ''\n        let i: any = null\n        for (i in decoded) {\n            buf += String.fromCharCode(decoded.charCodeAt(i) ^ keys.charCodeAt(i % keys.length) ^ (255 & i))\n        }\n\n        return decodeURIComponent(escape(buf)) // Convert back to original string\n    }\n    update(deltaTime: number) {\n\n    }\n}\n\n"]}