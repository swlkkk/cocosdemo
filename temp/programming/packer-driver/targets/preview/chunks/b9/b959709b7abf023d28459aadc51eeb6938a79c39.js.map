{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/assets/scripts/GPRoundBoxAssembler.ts"],"names":["dynamicAtlasManager","GPRoundBoxAssembler","GetIndexBuffer","sprite","indexBuffer","index","fanIndexBuild","center","start","end","last","i","segments","cur","push","leftBottom","leftTop","rightTop","rightBottom","createData","renderData","requestRenderData","corner","vNum","dataLength","resize","chunk","setIndexBuffer","updateRenderData","frame","spriteFrame","packToDynamicAtlas","updateUVs","vertDirty","updateVertexData","updateWorldVerts","vData","vb","dataList","data","node","m","worldMatrix","stride","floatStride","offset","length","curData","x","y","rhw","m03","m07","m15","m00","m04","m12","m01","m05","m13","m02","m06","m14","fillBuffers","hasChangedFlags","bid","bufferId","vidOrigin","vertexOffset","meshBuffer","ib","iData","indexOffset","vid","indexCount","uiTrans","_uiProps","uiTransformComp","cw","width","ch","height","appX","anchorX","appY","anchorY","left","right","top","bottom","left_r","radius","bottom_r","top_r","right_r","fanPosBuild","startAngle","angle","Math","PI","cos","sin","uv","uv_l","uv_b","uv_r","uv_t","uv_w","abs","uv_h","updateColor","colorOffset","color","colorR","r","colorG","g","colorB","b","colorA","a"],"mappings":"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","sourcesContent":["import { IAssembler, IRenderData, RenderData, dynamicAtlasManager } from \"cc\";\nimport { GPRoundBoxSprite } from \"./GPRoundBoxSprite\";\n\nexport const GPRoundBoxAssembler: IAssembler = {\n\n    // 根据圆角segments参数，构造网格的顶点索引列表\n    GetIndexBuffer(sprite:GPRoundBoxSprite) {\n        let indexBuffer = [\n            0, 1, 2, 2, 3, 0,\n            4, 5, 6, 6, 7, 4,\n            8, 9, 10, 10, 11, 8\n        ]\n\n        // 为四个角的扇形push进索引值\n        let index = 12\n        let fanIndexBuild = function(center, start, end) {\n            let last = start;\n            for (let i = 0; i < sprite.segments - 1; i++) {\n                // 左上角 p2为扇形圆心，p1/p5为两个边界\n                let cur = index;\n                index++;\n                indexBuffer.push(center, last, cur);\n                last = cur;\n            }\n            indexBuffer.push(center, last, end)\n        }\n        if (sprite.leftBottom)\n            fanIndexBuild(3, 4, 0);\n        if (sprite.leftTop)\n            fanIndexBuild(2, 1, 5);\n        if (sprite.rightTop)\n            fanIndexBuild(9, 6, 10);\n        if (sprite.rightBottom)\n            fanIndexBuild(8, 11, 7);\n        return indexBuffer\n    },\n    createData (sprite: GPRoundBoxSprite) {\n        const renderData = sprite.requestRenderData();\n        let corner = 0;\n        corner += sprite.leftBottom ? 1: 0;\n        corner += sprite.leftTop ? 1: 0;\n        corner += sprite.rightTop ? 1: 0;\n        corner += sprite.rightBottom ? 1: 0;\n\n        let vNum = 12 + (sprite.segments - 1) * corner;\n        renderData.dataLength = vNum;\n        renderData.resize(vNum, 18 + sprite.segments * 3 * corner);\n\n        let indexBuffer = GPRoundBoxAssembler.GetIndexBuffer(sprite);\n        renderData.chunk.setIndexBuffer(indexBuffer);\n        return renderData;\n    },\n\n    // 照抄simple的\n    updateRenderData (sprite: GPRoundBoxSprite) {\n        const frame = sprite.spriteFrame;\n\n        dynamicAtlasManager.packToDynamicAtlas(sprite, frame);\n        this.updateUVs(sprite);// dirty need\n        //this.updateColor(sprite);// dirty need\n\n        const renderData = sprite.renderData;\n        if (renderData && frame) {\n            if (renderData.vertDirty) {\n                this.updateVertexData(sprite);\n            }\n            renderData.updateRenderData(sprite, frame);\n        }\n    },\n\n    // 局部坐标转世界坐标 照抄的，不用改\n    updateWorldVerts (sprite: GPRoundBoxSprite, chunk: { vb: any; }) {\n        const renderData = sprite.renderData!;\n        const vData = chunk.vb;\n\n        const dataList: IRenderData[] = renderData.data;\n        const node = sprite.node;\n        const m = node.worldMatrix;\n\n        const stride = renderData.floatStride;\n        let offset = 0;\n        const length = dataList.length;\n        for (let i = 0; i < length; i++) {\n            const curData = dataList[i];\n            const x = curData.x;\n            const y = curData.y;\n            let rhw = m.m03 * x + m.m07 * y + m.m15;\n            rhw = rhw ? 1 / rhw : 1;\n\n            offset = i * stride;\n            vData[offset + 0] = (m.m00 * x + m.m04 * y + m.m12) * rhw;\n            vData[offset + 1] = (m.m01 * x + m.m05 * y + m.m13) * rhw;\n            vData[offset + 2] = (m.m02 * x + m.m06 * y + m.m14) * rhw;\n        }\n    },\n\n    // 每帧调用的，把数据和到一整个meshbuffer里\n    fillBuffers (sprite: GPRoundBoxSprite) {\n        if (sprite === null) {\n            return;\n        }\n\n        const renderData = sprite.renderData!;\n        const chunk = renderData.chunk;\n        if (sprite.node.hasChangedFlags || renderData.vertDirty) {\n            // const vb = chunk.vertexAccessor.getVertexBuffer(chunk.bufferId);\n            this.updateWorldVerts(sprite, chunk);\n            renderData.vertDirty = false;\n        }\n        if (sprite[\"_flagChangedVersion\"] !== sprite.node[\"flagChangedVersion\"] || renderData.vertDirty) {\n            // const vb = chunk.vertexAccessor.getVertexBuffer(chunk.bufferId);\n            this.updateWorldVerts(sprite, chunk);\n            renderData.vertDirty = false;\n            sprite[\"_flagChangedVersion\"] = sprite.node[\"flagChangedVersion\"];\n        }\n\n\n        // quick version\n        const bid = chunk.bufferId;\n        const vidOrigin = chunk.vertexOffset;\n        const meshBuffer = chunk.meshBuffer;\n        const ib = chunk.meshBuffer.iData;\n        let indexOffset = meshBuffer.indexOffset;\n\n        const vid = vidOrigin;\n        // 沿着当前这个位置往后将我们这个对象的index放进去\n        let indexBuffer = GPRoundBoxAssembler.GetIndexBuffer(sprite);\n        for (let i = 0; i < renderData.indexCount; i++) {\n            ib[indexOffset++] = vid + indexBuffer[i];\n        }\n        meshBuffer.indexOffset += renderData.indexCount;\n    },\n\n    // 计算每个顶点相对于sprite坐标的位置\n    updateVertexData (sprite: GPRoundBoxSprite) {\n        const renderData: RenderData | null = sprite.renderData;\n        if (!renderData) {\n            return;\n        }\n\n        const uiTrans = sprite.node._uiProps.uiTransformComp!;\n        const dataList: IRenderData[] = renderData.data;\n        const cw = uiTrans.width;\n        const ch = uiTrans.height;\n        const appX = uiTrans.anchorX * cw;\n        const appY = uiTrans.anchorY * ch;\n\n        const left = 0 - appX;\n        const right = cw - appX;\n        const top = ch - appY;\n        const bottom = 0 - appY;\n\n        const left_r = left + sprite.radius;\n        const bottom_r = bottom + sprite.radius;\n        const top_r = top - sprite.radius;\n        const right_r = right - sprite.radius;\n\n        // 三个矩形的顶点\n        dataList[0].x = left;\n        dataList[0].y = sprite.leftBottom ? bottom_r: bottom;\n        dataList[1].x = left;\n        dataList[1].y = sprite.leftTop ? top_r: top;\n        dataList[2].x = left_r;\n        dataList[2].y = sprite.leftTop ? top_r: top;\n        dataList[3].x = left_r;\n        dataList[3].y = sprite.leftBottom ? bottom_r: bottom;\n        dataList[4].x = left_r;\n        dataList[4].y = bottom;\n        dataList[5].x = left_r;\n        dataList[5].y = top;\n        dataList[6].x = right_r;\n        dataList[6].y = top;\n        dataList[7].x = right_r;\n        dataList[7].y = bottom;\n        dataList[8].x = right_r;\n        dataList[8].y = sprite.rightBottom ? bottom_r: bottom;\n        dataList[9].x = right_r;\n        dataList[9].y = sprite.rightTop ? top_r: top;\n        dataList[10].x = right;\n        dataList[10].y = sprite.rightTop ? top_r: top;\n        dataList[11].x = right;\n        dataList[11].y = sprite.rightBottom ? bottom_r: bottom;\n        \n        // 扇形圆角的顶点\n        let index = 12;\n        let fanPosBuild = function(center, startAngle) {\n            for (let i = 1; i < sprite.segments; i++) {\n                // 我这里顶点都是按顺时针分配的，所以角度要从开始角度减\n                // 每个扇形都是90度\n                let angle = startAngle * Math.PI / 180 - i / sprite.segments * 0.5 * Math.PI;\n                dataList[index].x = center.x + Math.cos(angle) * sprite.radius;\n                dataList[index].y = center.y + Math.sin(angle) * sprite.radius;\n                index++;\n            }\n        }\n        if (sprite.leftBottom)\n            fanPosBuild(dataList[3], 270);\n        if (sprite.leftTop)\n            fanPosBuild(dataList[2], 180);\n        if (sprite.rightTop)\n            fanPosBuild(dataList[9], 90);\n        if (sprite.rightBottom)\n            fanPosBuild(dataList[8], 0);\n\n        renderData.vertDirty = true;\n    },\n\n    // 更新计算uv\n    updateUVs (sprite: GPRoundBoxSprite) {\n        if (!sprite.spriteFrame) return;\n        const renderData = sprite.renderData!;\n        const vData = renderData.chunk.vb;\n        const uv = sprite.spriteFrame.uv;\n\n        // 这里我打印了一下uv的值，第一个看上去是左上角，但其实，opengl端的纹理存在上下颠倒问题，所以这里其实还是左下角\n        // 左下，右下，左上，右上\n        const uv_l = uv[0];\n        const uv_b = uv[1];\n        const uv_r = uv[2];\n        const uv_t = uv[5];\n        const uv_w = Math.abs(uv_r - uv_l);\n        const uv_h = uv_t - uv_b;\n\n        const uiTrans = sprite.node._uiProps.uiTransformComp!;\n        const dataList: IRenderData[] = renderData.data;\n        const cw = uiTrans.width;\n        const ch = uiTrans.height;\n        const appX = uiTrans.anchorX * cw;\n        const appY = uiTrans.anchorY * ch;\n\n        // 用相对坐标，计算uv\n        for (let i = 0; i < renderData.dataLength; i++) {\n            vData[i * renderData.floatStride + 3] = uv_l + (dataList[i].x + appX) / cw * uv_w;\n            vData[i * renderData.floatStride + 4] = uv_b + (dataList[i].y + appY) / ch * uv_h;\n        }\n    },\n\n    // 照抄，不用改\n    updateColor (sprite: GPRoundBoxSprite) {\n        const renderData = sprite.renderData!;\n        const vData = renderData.chunk.vb;\n        let colorOffset = 5;\n        const color = sprite.color;\n        const colorR = color.r / 255;\n        const colorG = color.g / 255;\n        const colorB = color.b / 255;\n        const colorA = color.a / 255;\n        for (let i = 0; i < renderData.dataLength; i++, colorOffset += renderData.floatStride) {\n            vData[colorOffset] = colorR;\n            vData[colorOffset + 1] = colorG;\n            vData[colorOffset + 2] = colorB;\n            vData[colorOffset + 3] = colorA;\n        }\n    },\n};"]}