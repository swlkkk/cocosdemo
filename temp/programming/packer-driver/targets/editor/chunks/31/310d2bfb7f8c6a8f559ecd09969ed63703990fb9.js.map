{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/extensions/i18n/assets/LanguageData.ts"],"names":["init","language","ready","_language","t","key","win","window","languages","searcher","split","data","i","length","updateSceneRenderers","rootNodes","director","getScene","children","allLocalizedLabels","labels","getComponentsInChildren","Array","prototype","push","apply","label","node","active","updateLabel","allLocalizedSprites","sprites","sprite","updateSprite","_languageData","lang"],"mappings":";;;;;AAMA;AACA;AACA;AACA;AACO,WAASA,IAAT,CAAcC,QAAd,EAAgC;AACnC,qBAAAC,KAAK,GAAG,IAAR;;AACA,yBAAAC,SAAS,GAAGF,QAAZ;AACH;AAED;AACA;AACA;AACA;;;AACO,WAASG,CAAT,CAAWC,GAAX,EAAwB;AAC3B,UAAMC,GAAQ,GAAGC,MAAjB;;AAEA,QAAI,CAACD,GAAG,CAACE,SAAT,EAAoB;AAChB,aAAOH,GAAP;AACH;;AACD,UAAMI,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,CAAjB;AAEA,QAAIC,IAAI,GAAGL,GAAG,CAACE,SAAJ,CAAcL,SAAd,CAAX;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCD,MAAAA,IAAI,GAAGA,IAAI,CAACF,QAAQ,CAACG,CAAD,CAAT,CAAX;;AACA,UAAI,CAACD,IAAL,EAAW;AACP,eAAO,EAAP;AACH;AACJ;;AACD,WAAOA,IAAI,IAAI,EAAf;AACH;;AAEM,WAASG,oBAAT,GAAgC;AAAE;AACrC,UAAMC,SAAS,GAAGC,QAAQ,CAACC,QAAT,GAAqBC,QAAvC,CADmC,CAEnC;;AACA,UAAMC,kBAAyB,GAAG,EAAlC;;AACA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,SAAS,CAACF,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;AACvC,UAAIQ,MAAM,GAAGL,SAAS,CAACH,CAAD,CAAT,CAAaS,uBAAb,CAAqC,gBAArC,CAAb;AACAC,MAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BN,kBAA3B,EAA+CC,MAA/C;AACH;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,kBAAkB,CAACN,MAAvC,EAA+C,EAAED,CAAjD,EAAoD;AAChD,UAAIc,KAAK,GAAGP,kBAAkB,CAACP,CAAD,CAA9B;AACA,UAAG,CAACc,KAAK,CAACC,IAAN,CAAWC,MAAf,EAAsB;AACtBF,MAAAA,KAAK,CAACG,WAAN;AACH,KAZkC,CAanC;;;AACA,UAAMC,mBAA0B,GAAG,EAAnC;;AACA,SAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,SAAS,CAACF,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;AACvC,UAAImB,OAAO,GAAGhB,SAAS,CAACH,CAAD,CAAT,CAAaS,uBAAb,CAAqC,iBAArC,CAAd;AACAC,MAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BK,mBAA3B,EAAgDC,OAAhD;AACH;;AACD,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,mBAAmB,CAACjB,MAAxC,EAAgD,EAAED,CAAlD,EAAqD;AACjD,UAAIoB,MAAM,GAAGF,mBAAmB,CAAClB,CAAD,CAAhC;AACA,UAAG,CAACoB,MAAM,CAACL,IAAP,CAAYC,MAAhB,EAAuB;AACvBI,MAAAA,MAAM,CAACC,YAAP;AACH;AACJ,G,CAED;;;;UArDgBjC,I;OASAI,C;0BAkBAU;;;;;;;;AArCPE,MAAAA,Q,OAAAA,Q;;;;;;;;;2BAEEb,S,GAAY,I;;uBAEZD,K,GAAiB,K;;AA4DtBI,MAAAA,G,GAAMC,M;AACZD,MAAAA,GAAG,CAAC4B,aAAJ,GAAoB;AAChB,YAAIjC,QAAJ,GAAe;AACX,iBAAOE,SAAP;AACH,SAHe;;AAIhBH,QAAAA,IAAI,CAACmC,IAAD,EAAe;AACfnC,UAAAA,IAAI,CAACmC,IAAD,CAAJ;AACH,SANe;;AAOhBrB,QAAAA,oBAAoB,GAAG;AACnBA,UAAAA,oBAAoB;AACvB;;AATe,OAApB","sourcesContent":["import { director } from 'cc';\n\nexport let _language = 'tc';\n\nexport let ready: boolean = false;\n\n/**\n * 初始化\n * @param language \n */\nexport function init(language: string) {\n    ready = true;\n    _language = language;\n}\n\n/**\n * 翻译数据\n * @param key \n */\nexport function t(key: string) {\n    const win: any = window;\n    \n    if (!win.languages) {\n        return key;\n    }\n    const searcher = key.split('.');\n    \n    let data = win.languages[_language];\n    for (let i = 0; i < searcher.length; i++) {\n        data = data[searcher[i]];\n        if (!data) {\n            return '';\n        }\n    }\n    return data || '';\n}\n\nexport function updateSceneRenderers() { // very costly iterations\n    const rootNodes = director.getScene()!.children;\n    // walk all nodes with localize label and update\n    const allLocalizedLabels: any[] = [];\n    for (let i = 0; i < rootNodes.length; ++i) {\n        let labels = rootNodes[i].getComponentsInChildren('LocalizedLabel');\n        Array.prototype.push.apply(allLocalizedLabels, labels);\n    }\n    for (let i = 0; i < allLocalizedLabels.length; ++i) {\n        let label = allLocalizedLabels[i];\n        if(!label.node.active)continue;\n        label.updateLabel();\n    }\n    // walk all nodes with localize sprite and update\n    const allLocalizedSprites: any[] = [];\n    for (let i = 0; i < rootNodes.length; ++i) {\n        let sprites = rootNodes[i].getComponentsInChildren('LocalizedSprite');\n        Array.prototype.push.apply(allLocalizedSprites, sprites);\n    }\n    for (let i = 0; i < allLocalizedSprites.length; ++i) {\n        let sprite = allLocalizedSprites[i];\n        if(!sprite.node.active)continue;\n        sprite.updateSprite();\n    }\n}\n\n// 供插件查询当前语言使用\nconst win = window as any;\nwin._languageData = {\n    get language() {\n        return _language;\n    },\n    init(lang: string) {\n        init(lang);\n    },\n    updateSceneRenderers() {\n        updateSceneRenderers();\n    },\n};\n"]}