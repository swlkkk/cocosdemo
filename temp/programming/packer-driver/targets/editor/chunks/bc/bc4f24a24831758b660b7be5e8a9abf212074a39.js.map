{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/extensions/localization-editor/static/assets/components/icu-component.ts"],"names":["_decorator","ccclass","property","requireComponent","executeInEditMode","VirtualEnum"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;;;;AACT;;;AAEA;AACA;AACA;AACA;OAEM;AACFC,QAAAA,OADE;AAEFC,QAAAA,QAFE;AAGFC,QAAAA,gBAHE;AAIFC,QAAAA;AAJE,O,GAKFJ,U;;AAECK,MAAAA,W,0BAAAA,W;esourcesContent":["import { _decorator, CCBoolean, CCInteger, CCString, Enum, Label } from 'cc';\r\n// @ts-ignore\r\nimport { EDITOR } from 'cc/env';\r\n// import ICUType from '../core/ICUType';\r\n// import I18nComponent from './I18nComponent';\r\n// import { DateTimeFormatOptions, NumberFormatOptions, RelativeTimeFormatOptions, RelativeTimeFormatUnit } from '../core/ICUOptions';\r\n// import intl from '../core/IntlManager';\r\n\r\nconst {\r\n    ccclass,\r\n    property,\r\n    requireComponent,\r\n    executeInEditMode,\r\n} = _decorator;\r\n\r\nenum VirtualEnum {}\r\n\r\n// @ccclass('ICUComponent')\r\n// @executeInEditMode(true)\r\n// @requireComponent(Label)\r\n// export default class ICUComponent extends I18nComponent {\r\n//     @property({ visible: false })\r\n//     _icuValue = '';\r\n//\r\n//     @property\r\n//     set icuValue(value: string) {\r\n//         this._icuValue = value;\r\n//         this.render();\r\n//     }\r\n//\r\n//     get icuValue(): string {\r\n//         return this._icuValue;\r\n//     }\r\n//\r\n//     @property({ visible: false })\r\n//         _type: ICUType = ICUType.DateTime;\r\n//\r\n//     @property({ visible: true, type: Enum(ICUType) })\r\n//     set type(value: ICUType) {\r\n//         this._type = value;\r\n//     }\r\n//\r\n//     get type(): ICUType {\r\n//         return this._type;\r\n//     }\r\n//\r\n//     protected onLoad() {\r\n//         super.onLoad();\r\n//         if (this.label && !this._icuValue) {\r\n//             this._icuValue = this.label.string;\r\n//         }\r\n//     }\r\n//\r\n//     protected start() {\r\n//         this.render();\r\n//     }\r\n//\r\n//     public render() {\r\n//         super.render();\r\n//         if (this._icuValue.length === 0) return;\r\n//         let translatedString!: string;\r\n//         try {\r\n//             switch (this.type) {\r\n//                 case ICUType.Number:\r\n//                     translatedString = intl.tn(parseFloat(this.icuValue), this.numberFormatOptions);\r\n//                     break;\r\n//                 case ICUType.DateTime:\r\n//                     translatedString = intl.td(new Date(this.icuValue), this.dateTimeFormatOptions);\r\n//                     break;\r\n//                 case ICUType.RelativeTime:\r\n//                     translatedString = intl.tt(\r\n//                         parseFloat(this.icuValue),\r\n//                         this.relativeTimeUnit,\r\n//                         this.relativeTimeFormatOptions,\r\n//                     );\r\n//                     break;\r\n//                 case ICUType.List: {\r\n//                     const icuList = this.icuValue.split(',');\r\n//                     translatedString = intl.tl(icuList);\r\n//                     break;\r\n//                 }\r\n//                 default:\r\n//                     break;\r\n//             }\r\n//         } catch (e) {\r\n//             translatedString = this._icuValue;\r\n//         }\r\n//         if (EDITOR) {\r\n//             this.preview(translatedString);\r\n//         } else {\r\n//             this.label!.string = translatedString;\r\n//         }\r\n//     }\r\n//\r\n//     // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ auto generate by script don't edit ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n//     /************************** NumberFormatOptions **************************/\r\n//     @property({ visible: false })\r\n//         numberFormatOptions: NumberFormatOptions = { useGrouping: false };\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set numberStyle(value: string) {\r\n//         this.numberFormatOptions.style = value;\r\n//         this.render();\r\n//     }\r\n//     get numberStyle(): string {\r\n//         return this.numberFormatOptions.style as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCString,\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set currency(value: string) {\r\n//         this.numberFormatOptions.currency = value;\r\n//         this.render();\r\n//     }\r\n//     get currency(): string {\r\n//         return this.numberFormatOptions.currency as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set currencySign(value: string) {\r\n//         this.numberFormatOptions.currencySign = value;\r\n//         this.render();\r\n//     }\r\n//     get currencySign(): string {\r\n//         return this.numberFormatOptions.currencySign as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set currencyDisplay(value: string) {\r\n//         this.numberFormatOptions.currencyDisplay = value;\r\n//         this.render();\r\n//     }\r\n//     get currencyDisplay(): string {\r\n//         return this.numberFormatOptions.currencyDisplay as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCBoolean,\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set useGrouping(value: boolean) {\r\n//         this.numberFormatOptions.useGrouping = value;\r\n//         this.render();\r\n//     }\r\n//     get useGrouping(): boolean {\r\n//         return this.numberFormatOptions.useGrouping as boolean;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCInteger,\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set minimumIntegerDigits(value: number) {\r\n//         this.numberFormatOptions.minimumIntegerDigits = value;\r\n//         this.render();\r\n//     }\r\n//     get minimumIntegerDigits(): number {\r\n//         return this.numberFormatOptions.minimumIntegerDigits as number;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCInteger,\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set minimumFractionDigits(value: number) {\r\n//         this.numberFormatOptions.minimumFractionDigits = value;\r\n//         this.render();\r\n//     }\r\n//     get minimumFractionDigits(): number {\r\n//         return this.numberFormatOptions.minimumFractionDigits as number;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCInteger,\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set maximumFractionDigits(value: number) {\r\n//         this.numberFormatOptions.maximumFractionDigits = value;\r\n//         this.render();\r\n//     }\r\n//     get maximumFractionDigits(): number {\r\n//         return this.numberFormatOptions.maximumFractionDigits as number;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCInteger,\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set minimumSignificantDigits(value: number) {\r\n//         this.numberFormatOptions.minimumSignificantDigits = value;\r\n//         this.render();\r\n//     }\r\n//     get minimumSignificantDigits(): number {\r\n//         return this.numberFormatOptions.minimumSignificantDigits as number;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCInteger,\r\n//         group: 'Number',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.Number;\r\n//         },\r\n//     })\r\n//     set maximumSignificantDigits(value: number) {\r\n//         this.numberFormatOptions.maximumSignificantDigits = value;\r\n//         this.render();\r\n//     }\r\n//     get maximumSignificantDigits(): number {\r\n//         return this.numberFormatOptions.maximumSignificantDigits as number;\r\n//     }\r\n//\r\n//     /************************** DateTimeFormatOptions **************************/\r\n//     @property({ visible: false })\r\n//         dateTimeFormatOptions: DateTimeFormatOptions = {};\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set dateTimeLocaleMatcher(value: string) {\r\n//         this.dateTimeFormatOptions.localeMatcher = value;\r\n//         this.render();\r\n//     }\r\n//     get dateTimeLocaleMatcher(): string {\r\n//         return this.dateTimeFormatOptions.localeMatcher as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set weekday(value: string) {\r\n//         this.dateTimeFormatOptions.weekday = value;\r\n//         this.render();\r\n//     }\r\n//     get weekday(): string {\r\n//         return this.dateTimeFormatOptions.weekday as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set era(value: string) {\r\n//         this.dateTimeFormatOptions.era = value;\r\n//         this.render();\r\n//     }\r\n//     get era(): string {\r\n//         return this.dateTimeFormatOptions.era as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set year(value: string) {\r\n//         this.dateTimeFormatOptions.year = value;\r\n//         this.render();\r\n//     }\r\n//     get year(): string {\r\n//         return this.dateTimeFormatOptions.year as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set month(value: string) {\r\n//         this.dateTimeFormatOptions.month = value;\r\n//         this.render();\r\n//     }\r\n//     get month(): string {\r\n//         return this.dateTimeFormatOptions.month as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set day(value: string) {\r\n//         this.dateTimeFormatOptions.day = value;\r\n//         this.render();\r\n//     }\r\n//     get day(): string {\r\n//         return this.dateTimeFormatOptions.day as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set hour(value: string) {\r\n//         this.dateTimeFormatOptions.hour = value;\r\n//         this.render();\r\n//     }\r\n//     get hour(): string {\r\n//         return this.dateTimeFormatOptions.hour as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set minute(value: string) {\r\n//         this.dateTimeFormatOptions.minute = value;\r\n//         this.render();\r\n//     }\r\n//     get minute(): string {\r\n//         return this.dateTimeFormatOptions.minute as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set second(value: string) {\r\n//         this.dateTimeFormatOptions.second = value;\r\n//         this.render();\r\n//     }\r\n//     get second(): string {\r\n//         return this.dateTimeFormatOptions.second as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set timeZoneName(value: string) {\r\n//         this.dateTimeFormatOptions.timeZoneName = value;\r\n//         this.render();\r\n//     }\r\n//     get timeZoneName(): string {\r\n//         return this.dateTimeFormatOptions.timeZoneName as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set formatMatcher(value: string) {\r\n//         this.dateTimeFormatOptions.formatMatcher = value;\r\n//         this.render();\r\n//     }\r\n//     get formatMatcher(): string {\r\n//         return this.dateTimeFormatOptions.formatMatcher as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCBoolean,\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set hour12(value: boolean) {\r\n//         this.dateTimeFormatOptions.hour12 = value;\r\n//         this.render();\r\n//     }\r\n//     get hour12(): boolean {\r\n//         return this.dateTimeFormatOptions.hour12 as boolean;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: CCString,\r\n//         group: 'DateTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.DateTime;\r\n//         },\r\n//     })\r\n//     set timeZone(value: string) {\r\n//         this.dateTimeFormatOptions.timeZone = value;\r\n//         this.render();\r\n//     }\r\n//     get timeZone(): string {\r\n//         return this.dateTimeFormatOptions.timeZone as string;\r\n//     }\r\n//\r\n//     /************************** RelativeTimeOptions **************************/\r\n//     @property({ visible: false })\r\n//         relativeTimeFormatOptions: RelativeTimeFormatOptions = {};\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'RelativeTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.RelativeTime;\r\n//         },\r\n//     })\r\n//     set relativeTimeLocaleMatcher(value: string) {\r\n//         this.relativeTimeFormatOptions.localeMatcher = value;\r\n//         this.render();\r\n//     }\r\n//     get relativeTimeLocaleMatcher(): string {\r\n//         return this.relativeTimeFormatOptions.localeMatcher as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'RelativeTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.RelativeTime;\r\n//         },\r\n//     })\r\n//     set numeric(value: string) {\r\n//         this.relativeTimeFormatOptions.numeric = value;\r\n//         this.render();\r\n//     }\r\n//     get numeric(): string {\r\n//         return this.relativeTimeFormatOptions.numeric as string;\r\n//     }\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'RelativeTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.RelativeTime;\r\n//         },\r\n//     })\r\n//     set relativeTimeStyle(value: string) {\r\n//         this.relativeTimeFormatOptions.style = value;\r\n//         this.render();\r\n//     }\r\n//     get relativeTimeStyle(): string {\r\n//         return this.relativeTimeFormatOptions.style as string;\r\n//     }\r\n//\r\n//     @property({ visible: false })\r\n//         _relativeTimeUnit: RelativeTimeFormatUnit = 'second';\r\n//\r\n//     @property({\r\n//         type: Enum(VirtualEnum),\r\n//         group: 'RelativeTime',\r\n//         visible(this: ICUComponent) {\r\n//             return this.type === ICUType.RelativeTime;\r\n//         },\r\n//     })\r\n//     set relativeTimeUnit(value: string) {\r\n//         this._relativeTimeUnit = value;\r\n//         this.render();\r\n//     }\r\n//     get relativeTimeUnit(): string {\r\n//         return this._relativeTimeUnit;\r\n//     }\r\n//\r\n//     // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ auto generate by script don't edit ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\r\n// }\r\n"]}