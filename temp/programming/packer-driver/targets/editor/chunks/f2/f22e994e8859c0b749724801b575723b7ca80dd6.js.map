{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/assets/scripts/pdpool.ts"],"names":["_decorator","Component","Prefab","instantiate","ccclass","property","pdpool","start","initEnemy","index","randx","Number","randomNum","randy","randz","pdCoin","node","addChild","setPosition","maxNum","minNum","decimalNum","max","min","arguments","length","Math","floor","random","toFixed","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;;;;;;;;;OACxC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;wBAGjBM,M,WADZF,OAAO,CAAC,QAAD,C,UAEHC,QAAQ,CAACH,MAAD,C,2BAFb,MACaI,MADb,SAC4BL,SAD5B,CACsC;AAAA;AAAA;;AAAA;AAAA;;AAEX;AACvBM,QAAAA,KAAK,GAAG,CACJ;AACA;AACA;AACH;;AAEDC,QAAAA,SAAS,GAAG;AACR,eAAI,IAAIC,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAG,GAA3B,EAAgCA,KAAK,EAArC,EAAyC;AACrC,gBAAIC,KAAK,GAAGC,MAAM,CAAC,KAAKC,SAAL,CAAe,MAAf,EAAuB,MAAvB,EAA+B,CAA/B,CAAD,CAAlB;AACA,gBAAIC,KAAK,GAAGF,MAAM,CAAC,KAAKC,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAD,CAAlB;AACA,gBAAIE,KAAK,GAAGH,MAAM,CAAC,KAAKC,SAAL,CAAe,MAAf,EAAuB,MAAvB,EAA+B,CAA/B,CAAD,CAAlB;AACA,gBAAIG,MAAY,GAAGZ,WAAW,CAAC,KAAKY,MAAN,CAA9B;AACA,iBAAKC,IAAL,CAAUC,QAAV,CAAmBF,MAAnB;AACAA,YAAAA,MAAM,CAACG,WAAP,CAAmBR,KAAnB,EAA0BG,KAA1B,EAAgCC,KAAhC;AACH;AACJ;;AAEDF,QAAAA,SAAS,CAACO,MAAD,EAASC,MAAT,EAAiBC,UAAjB,EAA6B;AAClC,cAAIC,GAAG,GAAG,CAAV;AAAA,cACIC,GAAG,GAAG,CADV;AAEAH,UAAAA,MAAM,IAAID,MAAV,IAAoBI,GAAG,GAAGH,MAAN,EAAcE,GAAG,GAAGH,MAAxC,KAAmDI,GAAG,GAAGJ,MAAN,EAAcG,GAAG,GAAGF,MAAvE;;AACA,kBAAQI,SAAS,CAACC,MAAlB;AACI,iBAAK,CAAL;AACI,qBAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,GAAG,GAAG,CAAvB,CAAX,CAAP;AACA;;AACJ,iBAAK,CAAL;AACI,qBAAOI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,GAAG,GAAGC,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACA;;AACJ,iBAAK,CAAL;AACI,qBAAO,CAACG,IAAI,CAACE,MAAL,MAAiBN,GAAG,GAAGC,GAAvB,IAA8BA,GAA/B,EAAoCM,OAApC,CAA4CR,UAA5C,CAAP;AACA;;AACJ;AACI,qBAAOK,IAAI,CAACE,MAAL,EAAP;AACA;AAZR;AAcH;;AAEDE,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AA1CiC,O;;;;;iBAEjB,I","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, RigidBody } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('pdpool')\nexport class pdpool extends Component {\n    @property(Prefab)\n    pdCoin: Prefab = null; // 铺底金币\n    start() {\n        // this.scheduleOnce(()=>{\n        //     this.initEnemy();\n        // })\n    }\n\n    initEnemy() {\n        for(let index = 0; index < 100; index++) {\n            let randx = Number(this.randomNum(18.605, 45.505, 3))\n            let randy = Number(this.randomNum(31.7, 32.2, 3))\n            let randz = Number(this.randomNum(43.097, 53.673, 3))\n            let pdCoin: Node = instantiate(this.pdCoin);\n            this.node.addChild(pdCoin)\n            pdCoin.setPosition(randx, randy,randz)\n        }\n    }\n\n    randomNum(maxNum, minNum, decimalNum) {\n        var max = 0,\n            min = 0;\n        minNum <= maxNum ? (min = minNum, max = maxNum) : (min = maxNum, max = minNum);\n        switch (arguments.length) {\n            case 1:\n                return Math.floor(Math.random() * (max + 1));\n                break;\n            case 2:\n                return Math.floor(Math.random() * (max - min + 1) + min);\n                break;\n            case 3:\n                return (Math.random() * (max - min) + min).toFixed(decimalNum);\n                break;\n            default:\n                return Math.random();\n                break;\n        }\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n\n"]}