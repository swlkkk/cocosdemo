{"version":3,"sources":["file:///Users/swl/Desktop/cocos/cocos_android1/assets/scripts/Api/apiRequest.ts"],"names":["_decorator","Component","sys","sign","ccclass","property","apiRequest","QM","generateUUID","length","letters","result","i","Math","floor","random","post","url","body","success","failure","requestBody","Object","assign","key","localStorage","getItem","token","app_id","ts","Date","now","baseUrl","fetch","method","headers","abcd","encode","uuid","JSON","stringify","then","res","text","parse","decode","status","start","input","buf","unescape","encodeURIComponent","keys","encoded","String","fromCharCode","charCodeAt","btoa","atob","decoded","decodeURIComponent","escape","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, sys } from 'cc';\nconst { ccclass, property } = _decorator;\nimport { sign } from './sign';\n\n@ccclass('apiRequest')\nexport class apiRequest extends Component {\n    QM = new sign()\n    start() {\n\n    }\n    //key生成\n    generateUUID = (length = 64) => {\n        // 字符集\n        let letters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        let result = ''\n        for (let i = 0; i < length; i++) {\n            result += letters[Math.floor(Math.random() * letters.length)]\n        }\n        return result\n    }\n    // 加密函数\n    encode(input, key) {\n        let buf: any = unescape(encodeURIComponent(input))\n        let keys = unescape(encodeURIComponent(key))\n        let encoded = ''\n        let i: any = null\n        for (i in buf) {\n            encoded += String.fromCharCode(buf.charCodeAt(i) ^ keys.charCodeAt(i % keys.length) ^ (255 & i))\n        }\n        return btoa(encoded)\n    }\n\n    // 解密函数\n    decode(input, key) {\n        let buf: any = atob(input)\n        let keys = unescape(encodeURIComponent(key))\n        let decoded = ''\n        let i: any = null\n        for (i in buf) {\n            decoded += String.fromCharCode((255 & i) ^ buf.charCodeAt(i) ^ keys.charCodeAt(i % keys.length))\n        }\n        return decodeURIComponent(escape(decoded))\n    }\n    /**\n     * post请求封装\n     */\n    post = async (url: string, body: object, success: Function, failure: Function) => {\n        let requestBody: any = Object.assign({}, body)\n        let key = this.generateUUID()\n        if (sys.localStorage.getItem('token')) {\n            requestBody.token = sys.localStorage.getItem('token');\n        }\n        requestBody.app_id = 1499599523\n        requestBody.ts = Date.now();\n        requestBody.sign = this.QM.sign('zww', requestBody)\n        let baseUrl = 'https://t.zhuagewawa.com/restapi/'\n        return await fetch(baseUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'text/plain',\n                abcd: this.encode('/api/v2/' + url, key),\n                uuid: key,\n            },\n            body: this.encode(JSON.stringify(requestBody), key),\n        }).then(res => {\n            return res.text();\n        }).then(res => {\n            let result: any = JSON.parse(this.decode(res, key))\n            if (result.status === 'failed') {\n                failure(result)\n            } else {\n                success(result)\n            }\n        })\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n"]}