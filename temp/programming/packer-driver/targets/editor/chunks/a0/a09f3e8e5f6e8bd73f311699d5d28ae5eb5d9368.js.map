{"version":3,"sources":["file:///Users/swl/Downloads/cocosPusher/extensions/localization-editor/static/assets/core/resource-data-manager.ts"],"names":["ResourceDataManager","assetManager","settings","Settings","BUILD","EDITOR","mainName","pluginName","resourceBundlePath","resourceListPath","runtimeBundleName","readResourceList","Editor","Message","request","console","log","runtimeLoad","previewLoad","readResourceBundle","tags","editorLoad","locales","fileName","bundle","getBundle","undefined","jsonAsset","getResource","json","urlPath","fetch","e","checkBundle","bundleName","queryResult","querySettings","Category","ASSETS","find","it","Promise","resolve","loadBundle","error","resourceName","load","asset"],"mappings":"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","sourcesContent":["// @ts-ignore\r\nimport { BUILD, EDITOR } from 'cc/env';\r\nimport { AssetManager, assetManager, JsonAsset, settings, Settings } from 'cc';\r\nimport { ResourceBundle, ResourceList } from './l10n-options';\r\nimport { mainName, pluginName, resourceBundlePath, resourceListPath, runtimeBundleName } from './localization-global';\r\n\r\nexport default class ResourceDataManager {\r\n    async readResourceList(): Promise<ResourceList> {\r\n        if (EDITOR) {\r\n            return Editor.Message.request(mainName, 'get-resource-list');\r\n        } else if (BUILD) {\r\n            console.log(`[${pluginName}] this is build env`);\r\n            return this.runtimeLoad(resourceListPath);\r\n        } else {\r\n            return this.previewLoad(resourceListPath);\r\n        }\r\n    }\r\n\r\n    async readResourceBundle(tags: Intl.BCP47LanguageTag[]): Promise<ResourceBundle> {\r\n        if (EDITOR) {\r\n            return this.editorLoad(tags);\r\n        } else if (BUILD) {\r\n            return this.runtimeLoad(resourceBundlePath);\r\n        } else {\r\n            return this.previewLoad(resourceBundlePath);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 编辑器模式下使用\r\n     * @param locales\r\n     */\r\n    async editorLoad(locales: Intl.BCP47LanguageTag[]): Promise<ResourceBundle | undefined> {\r\n        return Editor.Message.request(mainName, 'get-resource-bundle', locales);\r\n    }\r\n\r\n    /**\r\n     * 构建后运行时使用\r\n     * @param fileName\r\n     */\r\n    async runtimeLoad<T>(fileName: string): Promise<T | undefined> {\r\n        const bundle = await this.getBundle(runtimeBundleName);\r\n        if (!bundle) return undefined;\r\n        const jsonAsset = await this.getResource(bundle, fileName);\r\n        if (!jsonAsset || !jsonAsset.json) return undefined;\r\n        return jsonAsset.json as any as T;\r\n    }\r\n\r\n    /**\r\n     * 浏览器预览使用\r\n     * @param urlPath\r\n     */\r\n    async previewLoad<T>(urlPath: string): Promise<T | undefined> {\r\n        try {\r\n            return await (await fetch(`${mainName}/${urlPath}`)).json() as T;\r\n        } catch (e) {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async checkBundle(bundleName: string): Promise<boolean> {\r\n        const queryResult: { bundle: string, version: string }[] | null = settings.querySettings<{ bundle: string, version: string }[]>(Settings.Category.ASSETS, 'preloadBundles');\r\n        const bundle = queryResult?.find((it) => it.bundle === bundleName);\r\n        return !!bundle;\r\n    }\r\n\r\n    async getBundle(bundleName: string): Promise<AssetManager.Bundle | undefined> {\r\n        return new Promise(resolve => {\r\n            assetManager.loadBundle(bundleName, (error, bundle: AssetManager.Bundle) => {\r\n                if (error) {\r\n                    resolve(undefined);\r\n                } else {\r\n                    resolve(bundle);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async getResource(bundle: AssetManager.Bundle, resourceName: string): Promise<JsonAsset | undefined> {\r\n        return new Promise(resolve => {\r\n            bundle.load(resourceName, (error, asset: JsonAsset) => {\r\n                if (error) {\r\n                    resolve(undefined);\r\n                } else {\r\n                    resolve(asset);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}